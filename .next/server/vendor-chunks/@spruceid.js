"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@spruceid";
exports.ids = ["vendor-chunks/@spruceid"];
exports.modules = {

/***/ "(ssr)/./node_modules/@spruceid/siwe-parser/dist/abnf.js":
/*!*********************************************************!*\
  !*** ./node_modules/@spruceid/siwe-parser/dist/abnf.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ParsedMessage = void 0;\nconst api_1 = __importDefault(__webpack_require__(/*! apg-js/src/apg-api/api */ \"(ssr)/./node_modules/apg-js/src/apg-api/api.js\"));\nconst node_exports_1 = __importDefault(__webpack_require__(/*! apg-js/src/apg-lib/node-exports */ \"(ssr)/./node_modules/apg-js/src/apg-lib/node-exports.js\"));\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@spruceid/siwe-parser/dist/utils.js\");\nconst GRAMMAR = `\nsign-in-with-ethereum =\n    [ scheme \"://\" ] domain %s\" wants you to sign in with your Ethereum account:\" LF\n    address LF\n    LF\n    [ statement LF ]\n    LF\n    %s\"URI: \" URI LF\n    %s\"Version: \" version LF\n    %s\"Chain ID: \" chain-id LF\n    %s\"Nonce: \" nonce LF\n    %s\"Issued At: \" issued-at\n    [ LF %s\"Expiration Time: \" expiration-time ]\n    [ LF %s\"Not Before: \" not-before ]\n    [ LF %s\"Request ID: \" request-id ]\n    [ LF %s\"Resources:\"\n    resources ]\n\ndomain = authority\n\naddress = \"0x\" 40*40HEXDIG\n    ; Must also conform to captilization\n    ; checksum encoding specified in EIP-55\n    ; where applicable (EOAs).\n\nstatement = 1*( reserved / unreserved / \" \" )\n    ; The purpose is to exclude LF (line breaks).\n\nversion = \"1\"\n\nnonce = 8*( ALPHA / DIGIT )\n\nissued-at = date-time\nexpiration-time = date-time\nnot-before = date-time\n\nrequest-id = *pchar\n\nchain-id = 1*DIGIT\n    ; See EIP-155 for valid CHAIN_IDs.\n\nresources = *( LF resource )\n\nresource = \"- \" URI\n\n; ------------------------------------------------------------------------------\n; RFC 3986\n\nURI           = scheme \":\" hier-part [ \"?\" query ] [ \"#\" fragment ]\n\nhier-part     = \"//\" authority path-abempty\n              / path-absolute\n              / path-rootless\n              / path-empty\n\nscheme        = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n\nauthority     = [ userinfo \"@\" ] host [ \":\" port ]\nuserinfo      = *( unreserved / pct-encoded / sub-delims / \":\" )\nhost          = IP-literal / IPv4address / reg-name\nport          = *DIGIT\n\nIP-literal    = \"[\" ( IPv6address / IPvFuture  ) \"]\"\n\nIPvFuture     = \"v\" 1*HEXDIG \".\" 1*( unreserved / sub-delims / \":\" )\n\nIPv6address   =                            6( h16 \":\" ) ls32\n              /                       \"::\" 5( h16 \":\" ) ls32\n              / [               h16 ] \"::\" 4( h16 \":\" ) ls32\n              / [ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n              / [ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n              / [ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n              / [ *4( h16 \":\" ) h16 ] \"::\"              ls32\n              / [ *5( h16 \":\" ) h16 ] \"::\"              h16\n              / [ *6( h16 \":\" ) h16 ] \"::\"\n\nh16           = 1*4HEXDIG\nls32          = ( h16 \":\" h16 ) / IPv4address\nIPv4address   = dec-octet \".\" dec-octet \".\" dec-octet \".\" dec-octet\ndec-octet     = DIGIT                 ; 0-9\n                 / %x31-39 DIGIT         ; 10-99\n                 / \"1\" 2DIGIT            ; 100-199\n                 / \"2\" %x30-34 DIGIT     ; 200-249\n                 / \"25\" %x30-35          ; 250-255\n\nreg-name      = *( unreserved / pct-encoded / sub-delims )\n\npath-abempty  = *( \"/\" segment )\npath-absolute = \"/\" [ segment-nz *( \"/\" segment ) ]\npath-rootless = segment-nz *( \"/\" segment )\npath-empty    = 0pchar\n\nsegment       = *pchar\nsegment-nz    = 1*pchar\n\npchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n\nquery         = *( pchar / \"/\" / \"?\" )\n\nfragment      = *( pchar / \"/\" / \"?\" )\n\npct-encoded   = \"%\" HEXDIG HEXDIG\n\nunreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\nreserved      = gen-delims / sub-delims\ngen-delims    = \":\" / \"/\" / \"?\" / \"#\" / \"[\" / \"]\" / \"@\"\nsub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n              / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n\n; ------------------------------------------------------------------------------\n; RFC 3339\n\ndate-fullyear   = 4DIGIT\ndate-month      = 2DIGIT  ; 01-12\ndate-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on\n                          ; month/year\ntime-hour       = 2DIGIT  ; 00-23\ntime-minute     = 2DIGIT  ; 00-59\ntime-second     = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second\n                          ; rules\ntime-secfrac    = \".\" 1*DIGIT\ntime-numoffset  = (\"+\" / \"-\") time-hour \":\" time-minute\ntime-offset     = \"Z\" / time-numoffset\n\npartial-time    = time-hour \":\" time-minute \":\" time-second\n                  [time-secfrac]\nfull-date       = date-fullyear \"-\" date-month \"-\" date-mday\nfull-time       = partial-time time-offset\n\ndate-time       = full-date \"T\" full-time\n\n; ------------------------------------------------------------------------------\n; RFC 5234\n\nALPHA          =  %x41-5A / %x61-7A   ; A-Z / a-z\nLF             =  %x0A\n                  ; linefeed\nDIGIT          =  %x30-39\n                  ; 0-9\nHEXDIG         =  DIGIT / \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\"\n`;\nclass GrammarApi {\n    static generateApi() {\n        const api = new api_1.default(GRAMMAR);\n        api.generate();\n        if (api.errors.length) {\n            console.error(api.errorsToAscii());\n            console.error(api.linesToAscii());\n            console.log(api.displayAttributeErrors());\n            throw new Error(`ABNF grammar has errors`);\n        }\n        return api.toObject();\n    }\n}\n_a = GrammarApi;\nGrammarApi.grammarObj = _a.generateApi();\nclass ParsedMessage {\n    constructor(msg) {\n        const parser = new node_exports_1.default.parser();\n        parser.ast = new node_exports_1.default.ast();\n        const id = node_exports_1.default.ids;\n        const scheme = function (state, chars, phraseIndex, phraseLength, data) {\n            const ret = id.SEM_OK;\n            if (state === id.SEM_PRE && phraseIndex === 0) {\n                data.scheme = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);\n            }\n            return ret;\n        };\n        parser.ast.callbacks.scheme = scheme;\n        const domain = function (state, chars, phraseIndex, phraseLength, data) {\n            const ret = id.SEM_OK;\n            if (state === id.SEM_PRE) {\n                data.domain = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);\n            }\n            return ret;\n        };\n        parser.ast.callbacks.domain = domain;\n        const address = function (state, chars, phraseIndex, phraseLength, data) {\n            const ret = id.SEM_OK;\n            if (state === id.SEM_PRE) {\n                data.address = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);\n            }\n            return ret;\n        };\n        parser.ast.callbacks.address = address;\n        const statement = function (state, chars, phraseIndex, phraseLength, data) {\n            const ret = id.SEM_OK;\n            if (state === id.SEM_PRE) {\n                data.statement = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);\n            }\n            return ret;\n        };\n        parser.ast.callbacks.statement = statement;\n        const uri = function (state, chars, phraseIndex, phraseLength, data) {\n            const ret = id.SEM_OK;\n            if (state === id.SEM_PRE) {\n                if (!data.uri) {\n                    data.uri = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);\n                }\n            }\n            return ret;\n        };\n        parser.ast.callbacks.uri = uri;\n        const version = function (state, chars, phraseIndex, phraseLength, data) {\n            const ret = id.SEM_OK;\n            if (state === id.SEM_PRE) {\n                data.version = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);\n            }\n            return ret;\n        };\n        parser.ast.callbacks.version = version;\n        const chainId = function (state, chars, phraseIndex, phraseLength, data) {\n            const ret = id.SEM_OK;\n            if (state === id.SEM_PRE) {\n                data.chainId = (0, utils_1.parseIntegerNumber)(node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength));\n            }\n            return ret;\n        };\n        parser.ast.callbacks[\"chain-id\"] = chainId;\n        const nonce = function (state, chars, phraseIndex, phraseLength, data) {\n            const ret = id.SEM_OK;\n            if (state === id.SEM_PRE) {\n                data.nonce = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);\n            }\n            return ret;\n        };\n        parser.ast.callbacks.nonce = nonce;\n        const issuedAt = function (state, chars, phraseIndex, phraseLength, data) {\n            const ret = id.SEM_OK;\n            if (state === id.SEM_PRE) {\n                data.issuedAt = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);\n            }\n            return ret;\n        };\n        parser.ast.callbacks[\"issued-at\"] = issuedAt;\n        const expirationTime = function (state, chars, phraseIndex, phraseLength, data) {\n            const ret = id.SEM_OK;\n            if (state === id.SEM_PRE) {\n                data.expirationTime = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);\n            }\n            return ret;\n        };\n        parser.ast.callbacks[\"expiration-time\"] = expirationTime;\n        const notBefore = function (state, chars, phraseIndex, phraseLength, data) {\n            const ret = id.SEM_OK;\n            if (state === id.SEM_PRE) {\n                data.notBefore = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);\n            }\n            return ret;\n        };\n        parser.ast.callbacks[\"not-before\"] = notBefore;\n        const requestId = function (state, chars, phraseIndex, phraseLength, data) {\n            const ret = id.SEM_OK;\n            if (state === id.SEM_PRE) {\n                data.requestId = node_exports_1.default.utils.charsToString(chars, phraseIndex, phraseLength);\n            }\n            return ret;\n        };\n        parser.ast.callbacks[\"request-id\"] = requestId;\n        const resources = function (state, chars, phraseIndex, phraseLength, data) {\n            const ret = id.SEM_OK;\n            if (state === id.SEM_PRE) {\n                data.resources = node_exports_1.default.utils\n                    .charsToString(chars, phraseIndex, phraseLength)\n                    .slice(3)\n                    .split(\"\\n- \");\n            }\n            return ret;\n        };\n        parser.ast.callbacks.resources = resources;\n        const result = parser.parse(GrammarApi.grammarObj, \"sign-in-with-ethereum\", msg);\n        if (!result.success) {\n            throw new Error(`Invalid message: ${JSON.stringify(result)}`);\n        }\n        const elements = {};\n        parser.ast.translate(elements);\n        for (const [key, value] of Object.entries(elements)) {\n            this[key] = value;\n        }\n        if (this.domain.length === 0) {\n            throw new Error(\"Domain cannot be empty.\");\n        }\n        if (!(0, utils_1.isEIP55Address)(this.address)) {\n            throw new Error(\"Address not conformant to EIP-55.\");\n        }\n    }\n}\nexports.ParsedMessage = ParsedMessage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@spruceid/siwe-parser/dist/abnf.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@spruceid/siwe-parser/dist/parsers.js":
/*!************************************************************!*\
  !*** ./node_modules/@spruceid/siwe-parser/dist/parsers.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ParsedMessage = void 0;\nconst abnf_1 = __webpack_require__(/*! ./abnf */ \"(ssr)/./node_modules/@spruceid/siwe-parser/dist/abnf.js\");\nObject.defineProperty(exports, \"ParsedMessage\", ({ enumerable: true, get: function () { return abnf_1.ParsedMessage; } }));\n__exportStar(__webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@spruceid/siwe-parser/dist/utils.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNwcnVjZWlkL3Npd2UtcGFyc2VyL2Rpc3QvcGFyc2Vycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckIsZUFBZSxtQkFBTyxDQUFDLHVFQUFRO0FBQy9CLGlEQUFnRCxFQUFFLHFDQUFxQyxnQ0FBZ0MsRUFBQztBQUN4SCxhQUFhLG1CQUFPLENBQUMseUVBQVMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcml2eS1saXQtZGVtby8uL25vZGVfbW9kdWxlcy9Ac3BydWNlaWQvc2l3ZS1wYXJzZXIvZGlzdC9wYXJzZXJzLmpzP2YxY2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUGFyc2VkTWVzc2FnZSA9IHZvaWQgMDtcbmNvbnN0IGFibmZfMSA9IHJlcXVpcmUoXCIuL2FibmZcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJQYXJzZWRNZXNzYWdlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhYm5mXzEuUGFyc2VkTWVzc2FnZTsgfSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi91dGlsc1wiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@spruceid/siwe-parser/dist/parsers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@spruceid/siwe-parser/dist/utils.js":
/*!**********************************************************!*\
  !*** ./node_modules/@spruceid/siwe-parser/dist/utils.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseIntegerNumber = exports.isEIP55Address = void 0;\nconst sha3_1 = __webpack_require__(/*! @noble/hashes/sha3 */ \"(ssr)/./node_modules/@noble/hashes/sha3.js\");\nconst utils_1 = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@noble/hashes/utils.js\");\n/**\n * This method is supposed to check if an address is conforming to EIP-55.\n * @param address Address to be checked if conforms with EIP-55.\n * @returns Either the return is or not in the EIP-55 format.\n */\nconst isEIP55Address = (address) => {\n    if (address.length != 42) {\n        return false;\n    }\n    const lowerAddress = `${address}`.toLowerCase().replace('0x', '');\n    const hash = (0, utils_1.bytesToHex)((0, sha3_1.keccak_256)(lowerAddress));\n    let ret = '0x';\n    for (let i = 0; i < lowerAddress.length; i++) {\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += lowerAddress[i].toUpperCase();\n        }\n        else {\n            ret += lowerAddress[i];\n        }\n    }\n    return address === ret;\n};\nexports.isEIP55Address = isEIP55Address;\nconst parseIntegerNumber = (number) => {\n    const parsed = parseInt(number);\n    if (isNaN(parsed))\n        throw new Error(\"Invalid number.\");\n    if (parsed === Infinity)\n        throw new Error(\"Invalid number.\");\n    return parsed;\n};\nexports.parseIntegerNumber = parseIntegerNumber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNwcnVjZWlkL3Npd2UtcGFyc2VyL2Rpc3QvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCLEdBQUcsc0JBQXNCO0FBQ25ELGVBQWUsbUJBQU8sQ0FBQyxzRUFBb0I7QUFDM0MsZ0JBQWdCLG1CQUFPLENBQUMsd0VBQXFCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixRQUFRO0FBQ3BDO0FBQ0E7QUFDQSxvQkFBb0IseUJBQXlCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJpdnktbGl0LWRlbW8vLi9ub2RlX21vZHVsZXMvQHNwcnVjZWlkL3Npd2UtcGFyc2VyL2Rpc3QvdXRpbHMuanM/MWVkOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFyc2VJbnRlZ2VyTnVtYmVyID0gZXhwb3J0cy5pc0VJUDU1QWRkcmVzcyA9IHZvaWQgMDtcbmNvbnN0IHNoYTNfMSA9IHJlcXVpcmUoXCJAbm9ibGUvaGFzaGVzL3NoYTNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIkBub2JsZS9oYXNoZXMvdXRpbHNcIik7XG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIHN1cHBvc2VkIHRvIGNoZWNrIGlmIGFuIGFkZHJlc3MgaXMgY29uZm9ybWluZyB0byBFSVAtNTUuXG4gKiBAcGFyYW0gYWRkcmVzcyBBZGRyZXNzIHRvIGJlIGNoZWNrZWQgaWYgY29uZm9ybXMgd2l0aCBFSVAtNTUuXG4gKiBAcmV0dXJucyBFaXRoZXIgdGhlIHJldHVybiBpcyBvciBub3QgaW4gdGhlIEVJUC01NSBmb3JtYXQuXG4gKi9cbmNvbnN0IGlzRUlQNTVBZGRyZXNzID0gKGFkZHJlc3MpID0+IHtcbiAgICBpZiAoYWRkcmVzcy5sZW5ndGggIT0gNDIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBsb3dlckFkZHJlc3MgPSBgJHthZGRyZXNzfWAudG9Mb3dlckNhc2UoKS5yZXBsYWNlKCcweCcsICcnKTtcbiAgICBjb25zdCBoYXNoID0gKDAsIHV0aWxzXzEuYnl0ZXNUb0hleCkoKDAsIHNoYTNfMS5rZWNjYWtfMjU2KShsb3dlckFkZHJlc3MpKTtcbiAgICBsZXQgcmV0ID0gJzB4JztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxvd2VyQWRkcmVzcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocGFyc2VJbnQoaGFzaFtpXSwgMTYpID49IDgpIHtcbiAgICAgICAgICAgIHJldCArPSBsb3dlckFkZHJlc3NbaV0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldCArPSBsb3dlckFkZHJlc3NbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFkZHJlc3MgPT09IHJldDtcbn07XG5leHBvcnRzLmlzRUlQNTVBZGRyZXNzID0gaXNFSVA1NUFkZHJlc3M7XG5jb25zdCBwYXJzZUludGVnZXJOdW1iZXIgPSAobnVtYmVyKSA9PiB7XG4gICAgY29uc3QgcGFyc2VkID0gcGFyc2VJbnQobnVtYmVyKTtcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBudW1iZXIuXCIpO1xuICAgIGlmIChwYXJzZWQgPT09IEluZmluaXR5KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIG51bWJlci5cIik7XG4gICAgcmV0dXJuIHBhcnNlZDtcbn07XG5leHBvcnRzLnBhcnNlSW50ZWdlck51bWJlciA9IHBhcnNlSW50ZWdlck51bWJlcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@spruceid/siwe-parser/dist/utils.js\n");

/***/ })

};
;