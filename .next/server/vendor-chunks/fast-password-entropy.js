"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fast-password-entropy";
exports.ids = ["vendor-chunks/fast-password-entropy"];
exports.modules = {

/***/ "(ssr)/./node_modules/fast-password-entropy/src/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/fast-password-entropy/src/index.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\n\n/**\n * Calculate the entropy of a string based on the size of the charset used and\n * the length of the string.\n *\n * Based on:\n * http://resources.infosecinstitute.com/password-security-complexity-vs-length/\n *\n * @param   {number} charset is the size of the string charset.\n * @param   {number} length  is the length of the string.\n * @returns {number}         the calculated entropy.\n */\nconst calcEntropy = (charset, length) =>\n  Math.round(length * Math.log(charset) / Math.LN2)\n\n/**\n * Standard character sets list.\n *\n * It assumes the `uppercase` and `lowercase` charsets to have 26 chars as in\n * the English alphabet. Numbers are 10 characters long. Symbols are the rest\n * of the 33 remaining chars in the 7-bit ASCII table.\n *\n * @type {Array}\n */\nconst stdCharsets = [{\n  name: 'lowercase',\n  re: /[a-z]/, // abcdefghijklmnopqrstuvwxyz\n  length: 26\n}, {\n  name: 'uppercase',\n  re: /[A-Z]/, // ABCDEFGHIJKLMNOPQRSTUVWXYZ\n  length: 26\n}, {\n  name: 'numbers',\n  re: /[0-9]/, // 1234567890\n  length: 10\n}, {\n  name: 'symbols',\n  re: /[^a-zA-Z0-9]/, //  !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ (and any other)\n  length: 33\n}]\n\n/**\n * Creates a function to calculate the total charset length of a string based on\n * the given charsets.\n *\n * @param  {Object[]} charsets are description of each charset. Shall contain a\n *                             regular expression `re` to identify each\n *                             character and a `length` with the total possible\n *                             characters in the set.\n * @returns {Function}         a function that will receive a string and return\n *                             the total charset length.\n */\nconst calcCharsetLengthWith = charsets =>\n  string =>\n    charsets.reduce((length, charset) =>\n      length + (charset.re.test(string) ? charset.length : 0), 0)\n\n/**\n * Helper function to calculate the total charset lengths of a given string\n * using the standard character sets.\n *\n * @type {Function}\n */\nconst calcCharsetLength = calcCharsetLengthWith(stdCharsets)\n\n/**\n * Calculate the given password entropy.\n *\n * @param   {string} string is the password string.\n * @returns {number}        [the calculated entropy.\n */\nconst passwordEntropy = string =>\n  string ? calcEntropy(calcCharsetLength(string), string.length) : 0\n\nmodule.exports = passwordEntropy\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmFzdC1wYXNzd29yZC1lbnRyb3B5L3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxnQkFBZ0I7QUFDN0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDJDQUEyQyxZQUFZLEVBQUU7QUFDekQ7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxVQUFVO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLGFBQWEsa0JBQWtCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLGVBQWU7QUFDNUI7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJpdnktbGl0LWRlbW8vLi9ub2RlX21vZHVsZXMvZmFzdC1wYXNzd29yZC1lbnRyb3B5L3NyYy9pbmRleC5qcz9hYWFkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgZW50cm9weSBvZiBhIHN0cmluZyBiYXNlZCBvbiB0aGUgc2l6ZSBvZiB0aGUgY2hhcnNldCB1c2VkIGFuZFxuICogdGhlIGxlbmd0aCBvZiB0aGUgc3RyaW5nLlxuICpcbiAqIEJhc2VkIG9uOlxuICogaHR0cDovL3Jlc291cmNlcy5pbmZvc2VjaW5zdGl0dXRlLmNvbS9wYXNzd29yZC1zZWN1cml0eS1jb21wbGV4aXR5LXZzLWxlbmd0aC9cbiAqXG4gKiBAcGFyYW0gICB7bnVtYmVyfSBjaGFyc2V0IGlzIHRoZSBzaXplIG9mIHRoZSBzdHJpbmcgY2hhcnNldC5cbiAqIEBwYXJhbSAgIHtudW1iZXJ9IGxlbmd0aCAgaXMgdGhlIGxlbmd0aCBvZiB0aGUgc3RyaW5nLlxuICogQHJldHVybnMge251bWJlcn0gICAgICAgICB0aGUgY2FsY3VsYXRlZCBlbnRyb3B5LlxuICovXG5jb25zdCBjYWxjRW50cm9weSA9IChjaGFyc2V0LCBsZW5ndGgpID0+XG4gIE1hdGgucm91bmQobGVuZ3RoICogTWF0aC5sb2coY2hhcnNldCkgLyBNYXRoLkxOMilcblxuLyoqXG4gKiBTdGFuZGFyZCBjaGFyYWN0ZXIgc2V0cyBsaXN0LlxuICpcbiAqIEl0IGFzc3VtZXMgdGhlIGB1cHBlcmNhc2VgIGFuZCBgbG93ZXJjYXNlYCBjaGFyc2V0cyB0byBoYXZlIDI2IGNoYXJzIGFzIGluXG4gKiB0aGUgRW5nbGlzaCBhbHBoYWJldC4gTnVtYmVycyBhcmUgMTAgY2hhcmFjdGVycyBsb25nLiBTeW1ib2xzIGFyZSB0aGUgcmVzdFxuICogb2YgdGhlIDMzIHJlbWFpbmluZyBjaGFycyBpbiB0aGUgNy1iaXQgQVNDSUkgdGFibGUuXG4gKlxuICogQHR5cGUge0FycmF5fVxuICovXG5jb25zdCBzdGRDaGFyc2V0cyA9IFt7XG4gIG5hbWU6ICdsb3dlcmNhc2UnLFxuICByZTogL1thLXpdLywgLy8gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcbiAgbGVuZ3RoOiAyNlxufSwge1xuICBuYW1lOiAndXBwZXJjYXNlJyxcbiAgcmU6IC9bQS1aXS8sIC8vIEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXG4gIGxlbmd0aDogMjZcbn0sIHtcbiAgbmFtZTogJ251bWJlcnMnLFxuICByZTogL1swLTldLywgLy8gMTIzNDU2Nzg5MFxuICBsZW5ndGg6IDEwXG59LCB7XG4gIG5hbWU6ICdzeW1ib2xzJyxcbiAgcmU6IC9bXmEtekEtWjAtOV0vLCAvLyAgIVwiIyQlJicoKSorLC0uLzo7PD0+P0BbXFxdXl9ge3x9fiAoYW5kIGFueSBvdGhlcilcbiAgbGVuZ3RoOiAzM1xufV1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdG8gY2FsY3VsYXRlIHRoZSB0b3RhbCBjaGFyc2V0IGxlbmd0aCBvZiBhIHN0cmluZyBiYXNlZCBvblxuICogdGhlIGdpdmVuIGNoYXJzZXRzLlxuICpcbiAqIEBwYXJhbSAge09iamVjdFtdfSBjaGFyc2V0cyBhcmUgZGVzY3JpcHRpb24gb2YgZWFjaCBjaGFyc2V0LiBTaGFsbCBjb250YWluIGFcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWd1bGFyIGV4cHJlc3Npb24gYHJlYCB0byBpZGVudGlmeSBlYWNoXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyIGFuZCBhIGBsZW5ndGhgIHdpdGggdGhlIHRvdGFsIHBvc3NpYmxlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVycyBpbiB0aGUgc2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSAgICAgICAgIGEgZnVuY3Rpb24gdGhhdCB3aWxsIHJlY2VpdmUgYSBzdHJpbmcgYW5kIHJldHVyblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB0b3RhbCBjaGFyc2V0IGxlbmd0aC5cbiAqL1xuY29uc3QgY2FsY0NoYXJzZXRMZW5ndGhXaXRoID0gY2hhcnNldHMgPT5cbiAgc3RyaW5nID0+XG4gICAgY2hhcnNldHMucmVkdWNlKChsZW5ndGgsIGNoYXJzZXQpID0+XG4gICAgICBsZW5ndGggKyAoY2hhcnNldC5yZS50ZXN0KHN0cmluZykgPyBjaGFyc2V0Lmxlbmd0aCA6IDApLCAwKVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBjYWxjdWxhdGUgdGhlIHRvdGFsIGNoYXJzZXQgbGVuZ3RocyBvZiBhIGdpdmVuIHN0cmluZ1xuICogdXNpbmcgdGhlIHN0YW5kYXJkIGNoYXJhY3RlciBzZXRzLlxuICpcbiAqIEB0eXBlIHtGdW5jdGlvbn1cbiAqL1xuY29uc3QgY2FsY0NoYXJzZXRMZW5ndGggPSBjYWxjQ2hhcnNldExlbmd0aFdpdGgoc3RkQ2hhcnNldHMpXG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBnaXZlbiBwYXNzd29yZCBlbnRyb3B5LlxuICpcbiAqIEBwYXJhbSAgIHtzdHJpbmd9IHN0cmluZyBpcyB0aGUgcGFzc3dvcmQgc3RyaW5nLlxuICogQHJldHVybnMge251bWJlcn0gICAgICAgIFt0aGUgY2FsY3VsYXRlZCBlbnRyb3B5LlxuICovXG5jb25zdCBwYXNzd29yZEVudHJvcHkgPSBzdHJpbmcgPT5cbiAgc3RyaW5nID8gY2FsY0VudHJvcHkoY2FsY0NoYXJzZXRMZW5ndGgoc3RyaW5nKSwgc3RyaW5nLmxlbmd0aCkgOiAwXG5cbm1vZHVsZS5leHBvcnRzID0gcGFzc3dvcmRFbnRyb3B5XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fast-password-entropy/src/index.js\n");

/***/ })

};
;