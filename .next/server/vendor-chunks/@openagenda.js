/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@openagenda";
exports.ids = ["vendor-chunks/@openagenda"];
exports.modules = {

/***/ "(ssr)/./node_modules/@openagenda/verror/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@openagenda/verror/dist/index.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.js\nvar src_exports = {};\n__export(src_exports, {\n  BadGateway: () => BadGateway,\n  BadRequest: () => BadRequest,\n  Conflict: () => Conflict,\n  Forbidden: () => Forbidden,\n  GeneralError: () => GeneralError,\n  Gone: () => Gone,\n  LengthRequired: () => LengthRequired,\n  MethodNotAllowed: () => MethodNotAllowed,\n  NotAcceptable: () => NotAcceptable,\n  NotAuthenticated: () => NotAuthenticated,\n  NotFound: () => NotFound,\n  NotImplemented: () => NotImplemented,\n  PaymentError: () => PaymentError,\n  Timeout: () => Timeout,\n  TooManyRequests: () => TooManyRequests,\n  Unavailable: () => Unavailable,\n  Unprocessable: () => Unprocessable,\n  VError: () => verror_default,\n  default: () => src_default\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/verror.js\nvar import_inherits = __toESM(__webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\"));\nvar import_assertion_error2 = __toESM(__webpack_require__(/*! assertion-error */ \"(ssr)/./node_modules/assertion-error/index.js\"));\n\n// src/assert.js\nfunction isError(arg) {\n  return Object.prototype.toString.call(arg) === \"[object Error]\" || arg instanceof Error;\n}\nfunction isObject(arg) {\n  return typeof arg === \"object\" && arg !== null;\n}\nfunction isString(arg) {\n  return typeof arg === \"string\";\n}\nfunction isFunc(arg) {\n  return typeof arg === \"function\";\n}\n\n// src/parseConstructorArguments.js\nvar import_sprintf_js = __webpack_require__(/*! sprintf-js */ \"(ssr)/./node_modules/sprintf-js/src/sprintf.js\");\nvar import_assertion_error = __toESM(__webpack_require__(/*! assertion-error */ \"(ssr)/./node_modules/assertion-error/index.js\"));\nfunction parseConstructorArguments(...argv) {\n  let options;\n  let sprintfArgs;\n  if (argv.length === 0) {\n    options = {};\n    sprintfArgs = [];\n  } else if (isError(argv[0])) {\n    options = { cause: argv[0] };\n    sprintfArgs = argv.slice(1);\n  } else if (typeof argv[0] === \"object\") {\n    options = {};\n    for (const k in argv[0]) {\n      if (Object.prototype.hasOwnProperty.call(argv[0], k)) {\n        options[k] = argv[0][k];\n      }\n    }\n    sprintfArgs = argv.slice(1);\n  } else {\n    if (!isString(argv[0])) {\n      throw new import_assertion_error.default(\n        \"first argument to VError, or WError constructor must be a string, object, or Error\"\n      );\n    }\n    options = {};\n    sprintfArgs = argv;\n  }\n  if (!isObject(options))\n    throw new import_assertion_error.default(\"options (object) is required\");\n  if (options.meta && !isObject(options.meta))\n    throw new import_assertion_error.default(\"options.meta must be an object\");\n  return {\n    options,\n    shortMessage: sprintfArgs.length === 0 ? \"\" : import_sprintf_js.sprintf.apply(null, sprintfArgs)\n  };\n}\n\n// src/utils.js\nfunction defineProperty(target, descriptor) {\n  descriptor.enumerable = descriptor.enumerable || false;\n  descriptor.configurable = true;\n  if (\"value\" in descriptor)\n    descriptor.writable = true;\n  Object.defineProperty(target, descriptor.key, descriptor);\n}\nfunction defineProperties(target, props) {\n  for (let i = 0; i < props.length; i++) {\n    defineProperty(target, props[i]);\n  }\n}\n\n// src/verror.js\nvar META = \"@@verror/meta\";\nvar reserved = [\n  \"name\",\n  \"message\",\n  \"shortMessage\",\n  \"cause\",\n  \"info\",\n  \"stack\",\n  \"fileName\",\n  \"lineNumber\"\n];\nfunction mergeMeta(instance, meta2) {\n  if (!meta2) {\n    return;\n  }\n  for (const k in meta2) {\n    if (Object.prototype.hasOwnProperty.call(meta2, k)) {\n      if (reserved.includes(k)) {\n        throw new import_assertion_error2.default(`\"${k}\" is a reserved meta`);\n      }\n      instance[META][k] = meta2[k];\n      instance[k] = meta2[k];\n    }\n  }\n}\nfunction VError(...args) {\n  if (!(this instanceof VError)) {\n    return new VError(...args);\n  }\n  const { options, shortMessage } = parseConstructorArguments(...args);\n  const { cause: cause2, constructorOpt, info: info2, name, skipCauseMessage, meta: meta2 } = options;\n  let message = shortMessage;\n  if (cause2) {\n    if (!isError(cause2))\n      throw new import_assertion_error2.default(\"cause is not an Error\");\n    if (!skipCauseMessage && cause2.message) {\n      message = message === \"\" ? cause2.message : `${message}: ${cause2.message}`;\n    }\n  }\n  Error.call(this, message);\n  if (name) {\n    if (!isString(name))\n      throw new import_assertion_error2.default(`error's \"name\" must be a string`);\n    this.name = name;\n  }\n  this.message = message;\n  this.shortMessage = shortMessage;\n  if (cause2) {\n    this.cause = cause2;\n  }\n  this.info = {};\n  if (info2) {\n    for (const k in info2) {\n      if (Object.prototype.hasOwnProperty.call(info2, k)) {\n        this.info[k] = info2[k];\n      }\n    }\n  }\n  defineProperty(this, {\n    key: META,\n    value: {}\n  });\n  mergeMeta(this, VError.meta(this));\n  mergeMeta(this, meta2);\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, constructorOpt || this.constructor);\n  } else {\n    this.stack = new Error().stack;\n  }\n}\n(0, import_inherits.default)(VError, Error);\ndefineProperties(VError.prototype, [\n  {\n    key: \"toString\",\n    value: function toString() {\n      let str = Object.prototype.hasOwnProperty.call(this, \"name\") && this.name || this.constructor.name || this.constructor.prototype.name;\n      if (this.message) {\n        str += `: ${this.message}`;\n      }\n      return str;\n    }\n  },\n  {\n    key: \"toJSON\",\n    value: function toJSON() {\n      const obj = {\n        name: this.name,\n        message: this.message,\n        shortMessage: this.shortMessage,\n        cause: this.cause,\n        info: this.info\n      };\n      for (const key in this[META]) {\n        if (Object.prototype.hasOwnProperty.call(this[META], key) && !(key in obj)) {\n          obj[key] = this[META][key];\n        }\n      }\n      return obj;\n    }\n  }\n]);\ndefineProperties(VError, [\n  {\n    key: \"cause\",\n    value: function cause(err) {\n      if (!isError(err))\n        throw new import_assertion_error2.default(\"err must be an Error\");\n      return isError(err.cause) ? err.cause : null;\n    }\n  },\n  {\n    key: \"info\",\n    value: function info(err) {\n      if (!isError(err))\n        throw new import_assertion_error2.default(\"err must be an Error\");\n      const cause2 = VError.cause(err);\n      const rv = cause2 !== null ? VError.info(cause2) : {};\n      if (isObject(err.info)) {\n        for (const k in err.info) {\n          if (Object.prototype.hasOwnProperty.call(err.info, k)) {\n            rv[k] = err.info[k];\n          }\n        }\n      }\n      return rv;\n    }\n  },\n  {\n    key: \"meta\",\n    value: function meta(err) {\n      if (!isError(err))\n        throw new import_assertion_error2.default(\"err must be an Error\");\n      const cause2 = VError.cause(err);\n      const rv = cause2 !== null ? VError.meta(cause2) : {};\n      if (isObject(err[META])) {\n        for (const k in err[META]) {\n          if (Object.prototype.hasOwnProperty.call(err[META], k)) {\n            rv[k] = err[META][k];\n          }\n        }\n      }\n      return rv;\n    }\n  },\n  {\n    key: \"findCauseByName\",\n    value: function findCauseByName(err, name) {\n      if (!isError(err))\n        throw new import_assertion_error2.default(\"err must be an Error\");\n      if (!isString(name))\n        throw new import_assertion_error2.default(\"name (string) is required\");\n      if (name.length <= 0)\n        throw new import_assertion_error2.default(\"name cannot be empty\");\n      for (let cause2 = err; cause2 !== null; cause2 = VError.cause(cause2)) {\n        if (!isError(err))\n          throw new import_assertion_error2.default(\"cause must be an Error\");\n        if (cause2.name === name) {\n          return cause2;\n        }\n      }\n      return null;\n    }\n  },\n  {\n    key: \"findCauseByType\",\n    value: function findCauseByType(err, type) {\n      if (!isError(err))\n        throw new import_assertion_error2.default(\"err must be an Error\");\n      if (!isFunc(type))\n        throw new import_assertion_error2.default(\"type (func) is required\");\n      for (let cause2 = err; cause2 !== null; cause2 = VError.cause(cause2)) {\n        if (!isError(err))\n          throw new import_assertion_error2.default(\"cause must be an Error\");\n        if (cause2 instanceof type) {\n          return cause2;\n        }\n      }\n      return null;\n    }\n  },\n  {\n    key: \"hasCauseWithName\",\n    value: function hasCauseWithName(err, name) {\n      return VError.findCauseByName(err, name) !== null;\n    }\n  },\n  {\n    key: \"hasCauseWithType\",\n    value: function hasCauseWithType(err, type) {\n      return VError.findCauseByType(err, type) !== null;\n    }\n  },\n  {\n    key: \"fullStack\",\n    value: function fullStack(err) {\n      if (!isError(err))\n        throw new import_assertion_error2.default(\"err must be an Error\");\n      const cause2 = VError.cause(err);\n      if (cause2) {\n        return `${err.stack}\ncaused by: ${VError.fullStack(cause2)}`;\n      }\n      return err.stack;\n    }\n  },\n  {\n    key: \"errorFromList\",\n    value: function errorFromList(errors) {\n      if (!Array.isArray(errors)) {\n        throw new import_assertion_error2.default(\"list of errors (array) is required\");\n      }\n      errors.forEach(function(error) {\n        if (!isObject(error)) {\n          throw new import_assertion_error2.default(\"errors ([object]) is required\");\n        }\n      });\n      if (errors.length === 0) {\n        return null;\n      }\n      errors.forEach((e) => {\n        if (!isError(e))\n          throw new import_assertion_error2.default(\"error must be an Error\");\n      });\n      if (errors.length === 1) {\n        return errors[0];\n      }\n      return new MultiError(errors);\n    }\n  },\n  {\n    key: \"errorForEach\",\n    value: function errorForEach(err, func) {\n      if (!isError(err))\n        throw new import_assertion_error2.default(\"err must be an Error\");\n      if (!isFunc(func))\n        throw new import_assertion_error2.default(\"func (func) is required\");\n      if (err instanceof MultiError) {\n        err.errors.forEach((e) => {\n          func(e);\n        });\n      } else {\n        func(err);\n      }\n    }\n  }\n]);\nVError.prototype.name = \"VError\";\nfunction MultiError(errors) {\n  if (!(this instanceof MultiError)) {\n    return new MultiError(errors);\n  }\n  if (!Array.isArray(errors)) {\n    throw new import_assertion_error2.default(\"list of errors (array) is required\");\n  }\n  if (errors.length <= 0) {\n    throw new import_assertion_error2.default(\"must be at least one error is required\");\n  }\n  VError.call(\n    this,\n    {\n      cause: errors[0],\n      meta: {\n        errors: [...errors]\n      }\n    },\n    \"first of %d error%s\",\n    errors.length,\n    errors.length === 1 ? \"\" : \"s\"\n  );\n}\n(0, import_inherits.default)(MultiError, VError);\nMultiError.prototype.name = \"MultiError\";\nfunction WError(...args) {\n  if (!(this instanceof WError)) {\n    return new WError(...args);\n  }\n  const { options, shortMessage } = parseConstructorArguments(...args);\n  options.skipCauseMessage = true;\n  VError.call(\n    this,\n    options,\n    \"%s\",\n    shortMessage\n  );\n}\n(0, import_inherits.default)(WError, VError);\ndefineProperties(WError.prototype, [\n  {\n    key: \"toString\",\n    value: function toString2() {\n      let str = Object.prototype.hasOwnProperty.call(this, \"name\") && this.name || this.constructor.name || this.constructor.prototype.name;\n      if (this.message) {\n        str += `: ${this.message}`;\n      }\n      if (this.cause && this.cause.message) {\n        str += `; caused by ${this.cause.toString()}`;\n      }\n      return str;\n    }\n  }\n]);\nWError.prototype.name = \"WError\";\nVError.VError = VError;\nVError.WError = WError;\nVError.MultiError = MultiError;\nVError.META = META;\nvar verror_default = VError;\n\n// src/http.js\nvar http_exports = {};\n__export(http_exports, {\n  BadGateway: () => BadGateway,\n  BadRequest: () => BadRequest,\n  Conflict: () => Conflict,\n  Forbidden: () => Forbidden,\n  GeneralError: () => GeneralError,\n  Gone: () => Gone,\n  LengthRequired: () => LengthRequired,\n  MethodNotAllowed: () => MethodNotAllowed,\n  NotAcceptable: () => NotAcceptable,\n  NotAuthenticated: () => NotAuthenticated,\n  NotFound: () => NotFound,\n  NotImplemented: () => NotImplemented,\n  PaymentError: () => PaymentError,\n  Timeout: () => Timeout,\n  TooManyRequests: () => TooManyRequests,\n  Unavailable: () => Unavailable,\n  Unprocessable: () => Unprocessable,\n  VError: () => verror_default\n});\nvar import_inherits2 = __toESM(__webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\"));\nvar import_depd = __toESM(__webpack_require__(/*! depd */ \"(ssr)/./node_modules/depd/index.js\"));\nvar deprecate = (0, import_depd.default)(\"@openangeda/verror\");\nfunction createError(name, statusCode, className) {\n  const ExtendedError = function(...args) {\n    if (!(this instanceof ExtendedError)) {\n      return new ExtendedError(...args);\n    }\n    const { options, shortMessage } = parseConstructorArguments(...args);\n    options.meta = {\n      code: statusCode,\n      statusCode,\n      className,\n      ...options.meta\n    };\n    verror_default.call(\n      this,\n      options,\n      shortMessage\n    );\n    deprecate.property(this, \"code\", \"use `statusCode` instead of `code`\");\n  };\n  Object.defineProperty(ExtendedError, \"name\", { configurable: true, value: name });\n  (0, import_inherits2.default)(ExtendedError, verror_default);\n  ExtendedError.prototype.name = name;\n  return ExtendedError;\n}\nvar BadRequest = createError(\"BadRequest\", 400, \"bad-request\");\nvar NotAuthenticated = createError(\"NotAuthenticated\", 401, \"not-authenticated\");\nvar PaymentError = createError(\"PaymentError\", 402, \"payment-error\");\nvar Forbidden = createError(\"Forbidden\", 403, \"forbidden\");\nvar NotFound = createError(\"NotFound\", 404, \"not-found\");\nvar MethodNotAllowed = createError(\"MethodNotAllowed\", 405, \"method-not-allowed\");\nvar NotAcceptable = createError(\"NotAcceptable\", 406, \"not-acceptable\");\nvar Timeout = createError(\"Timeout\", 408, \"timeout\");\nvar Conflict = createError(\"Conflict\", 409, \"conflict\");\nvar Gone = createError(\"Gone\", 410, \"gone\");\nvar LengthRequired = createError(\"LengthRequired\", 411, \"length-required\");\nvar Unprocessable = createError(\"Unprocessable\", 422, \"unprocessable\");\nvar TooManyRequests = createError(\"TooManyRequests\", 429, \"too-many-requests\");\nvar GeneralError = createError(\"GeneralError\", 500, \"general-error\");\nvar NotImplemented = createError(\"NotImplemented\", 501, \"not-implemented\");\nvar BadGateway = createError(\"BadGateway\", 502, \"bad-gateway\");\nvar Unavailable = createError(\"Unavailable\", 503, \"unavailable\");\n\n// src/index.js\nvar httpAliases = {\n  400: BadRequest,\n  401: NotAuthenticated,\n  402: PaymentError,\n  403: Forbidden,\n  404: NotFound,\n  405: MethodNotAllowed,\n  406: NotAcceptable,\n  408: Timeout,\n  409: Conflict,\n  410: Gone,\n  411: LengthRequired,\n  422: Unprocessable,\n  429: TooManyRequests,\n  500: GeneralError,\n  501: NotImplemented,\n  502: BadGateway,\n  503: Unavailable\n};\nObject.assign(verror_default, http_exports, httpAliases);\nvar src_default = verror_default;\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@openagenda/verror/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@openagenda/verror/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@openagenda/verror/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nmodule.exports = __webpack_require__(/*! ./dist/index */ \"(ssr)/./node_modules/@openagenda/verror/dist/index.js\")[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG9wZW5hZ2VuZGEvdmVycm9yL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDRIQUFnRCIsInNvdXJjZXMiOlsid2VicGFjazovL3ByaXZ5LWxpdC1kZW1vLy4vbm9kZV9tb2R1bGVzL0BvcGVuYWdlbmRhL3ZlcnJvci9pbmRleC5qcz8wNzE0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvaW5kZXgnKS5kZWZhdWx0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@openagenda/verror/index.js\n");

/***/ })

};
;