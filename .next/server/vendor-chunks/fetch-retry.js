"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fetch-retry";
exports.ids = ["vendor-chunks/fetch-retry"];
exports.modules = {

/***/ "(ssr)/./node_modules/fetch-retry/index.js":
/*!*******************************************!*\
  !*** ./node_modules/fetch-retry/index.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = function (fetch, defaults) {\n  defaults = defaults || {};\n  if (typeof fetch !== 'function') {\n    throw new ArgumentError('fetch must be a function');\n  }\n\n  if (typeof defaults !== 'object') {\n    throw new ArgumentError('defaults must be an object');\n  }\n\n  if (defaults.retries !== undefined && !isPositiveInteger(defaults.retries)) {\n    throw new ArgumentError('retries must be a positive integer');\n  }\n\n  if (defaults.retryDelay !== undefined && !isPositiveInteger(defaults.retryDelay) && typeof defaults.retryDelay !== 'function') {\n    throw new ArgumentError('retryDelay must be a positive integer or a function returning a positive integer');\n  }\n\n  if (defaults.retryOn !== undefined && !Array.isArray(defaults.retryOn) && typeof defaults.retryOn !== 'function') {\n    throw new ArgumentError('retryOn property expects an array or function');\n  }\n\n  var baseDefaults = {\n    retries: 3,\n    retryDelay: 1000,\n    retryOn: [],\n  };\n\n  defaults = Object.assign(baseDefaults, defaults);\n\n  return function fetchRetry(input, init) {\n    var retries = defaults.retries;\n    var retryDelay = defaults.retryDelay;\n    var retryOn = defaults.retryOn;\n\n    if (init && init.retries !== undefined) {\n      if (isPositiveInteger(init.retries)) {\n        retries = init.retries;\n      } else {\n        throw new ArgumentError('retries must be a positive integer');\n      }\n    }\n\n    if (init && init.retryDelay !== undefined) {\n      if (isPositiveInteger(init.retryDelay) || (typeof init.retryDelay === 'function')) {\n        retryDelay = init.retryDelay;\n      } else {\n        throw new ArgumentError('retryDelay must be a positive integer or a function returning a positive integer');\n      }\n    }\n\n    if (init && init.retryOn) {\n      if (Array.isArray(init.retryOn) || (typeof init.retryOn === 'function')) {\n        retryOn = init.retryOn;\n      } else {\n        throw new ArgumentError('retryOn property expects an array or function');\n      }\n    }\n\n    // eslint-disable-next-line no-undef\n    return new Promise(function (resolve, reject) {\n      var wrappedFetch = function (attempt) {\n        // As of node 18, this is no longer needed since node comes with native support for fetch:\n        /* istanbul ignore next */\n        var _input =\n          typeof Request !== 'undefined' && input instanceof Request\n            ? input.clone()\n            : input;\n        fetch(_input, init)\n          .then(function (response) {\n            if (Array.isArray(retryOn) && retryOn.indexOf(response.status) === -1) {\n              resolve(response);\n            } else if (typeof retryOn === 'function') {\n              try {\n                // eslint-disable-next-line no-undef\n                return Promise.resolve(retryOn(attempt, null, response))\n                  .then(function (retryOnResponse) {\n                    if(retryOnResponse) {\n                      retry(attempt, null, response);\n                    } else {\n                      resolve(response);\n                    }\n                  }).catch(reject);\n              } catch (error) {\n                reject(error);\n              }\n            } else {\n              if (attempt < retries) {\n                retry(attempt, null, response);\n              } else {\n                resolve(response);\n              }\n            }\n          })\n          .catch(function (error) {\n            if (typeof retryOn === 'function') {\n              try {\n                // eslint-disable-next-line no-undef\n                Promise.resolve(retryOn(attempt, error, null))\n                  .then(function (retryOnResponse) {\n                    if(retryOnResponse) {\n                      retry(attempt, error, null);\n                    } else {\n                      reject(error);\n                    }\n                  })\n                  .catch(function(error) {\n                    reject(error);\n                  });\n              } catch(error) {\n                reject(error);\n              }\n            } else if (attempt < retries) {\n              retry(attempt, error, null);\n            } else {\n              reject(error);\n            }\n          });\n      };\n\n      function retry(attempt, error, response) {\n        var delay = (typeof retryDelay === 'function') ?\n          retryDelay(attempt, error, response) : retryDelay;\n        setTimeout(function () {\n          wrappedFetch(++attempt);\n        }, delay);\n      }\n\n      wrappedFetch(0);\n    });\n  };\n};\n\nfunction isPositiveInteger(value) {\n  return Number.isInteger(value) && value >= 0;\n}\n\nfunction ArgumentError(message) {\n  this.name = 'ArgumentError';\n  this.message = message;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmV0Y2gtcmV0cnkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcml2eS1saXQtZGVtby8uL25vZGVfbW9kdWxlcy9mZXRjaC1yZXRyeS9pbmRleC5qcz9kMjk2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZmV0Y2gsIGRlZmF1bHRzKSB7XG4gIGRlZmF1bHRzID0gZGVmYXVsdHMgfHwge307XG4gIGlmICh0eXBlb2YgZmV0Y2ggIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgQXJndW1lbnRFcnJvcignZmV0Y2ggbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIGRlZmF1bHRzICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBBcmd1bWVudEVycm9yKCdkZWZhdWx0cyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgaWYgKGRlZmF1bHRzLnJldHJpZXMgIT09IHVuZGVmaW5lZCAmJiAhaXNQb3NpdGl2ZUludGVnZXIoZGVmYXVsdHMucmV0cmllcykpIHtcbiAgICB0aHJvdyBuZXcgQXJndW1lbnRFcnJvcigncmV0cmllcyBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlcicpO1xuICB9XG5cbiAgaWYgKGRlZmF1bHRzLnJldHJ5RGVsYXkgIT09IHVuZGVmaW5lZCAmJiAhaXNQb3NpdGl2ZUludGVnZXIoZGVmYXVsdHMucmV0cnlEZWxheSkgJiYgdHlwZW9mIGRlZmF1bHRzLnJldHJ5RGVsYXkgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgQXJndW1lbnRFcnJvcigncmV0cnlEZWxheSBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlciBvciBhIGZ1bmN0aW9uIHJldHVybmluZyBhIHBvc2l0aXZlIGludGVnZXInKTtcbiAgfVxuXG4gIGlmIChkZWZhdWx0cy5yZXRyeU9uICE9PSB1bmRlZmluZWQgJiYgIUFycmF5LmlzQXJyYXkoZGVmYXVsdHMucmV0cnlPbikgJiYgdHlwZW9mIGRlZmF1bHRzLnJldHJ5T24gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgQXJndW1lbnRFcnJvcigncmV0cnlPbiBwcm9wZXJ0eSBleHBlY3RzIGFuIGFycmF5IG9yIGZ1bmN0aW9uJyk7XG4gIH1cblxuICB2YXIgYmFzZURlZmF1bHRzID0ge1xuICAgIHJldHJpZXM6IDMsXG4gICAgcmV0cnlEZWxheTogMTAwMCxcbiAgICByZXRyeU9uOiBbXSxcbiAgfTtcblxuICBkZWZhdWx0cyA9IE9iamVjdC5hc3NpZ24oYmFzZURlZmF1bHRzLCBkZWZhdWx0cyk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGZldGNoUmV0cnkoaW5wdXQsIGluaXQpIHtcbiAgICB2YXIgcmV0cmllcyA9IGRlZmF1bHRzLnJldHJpZXM7XG4gICAgdmFyIHJldHJ5RGVsYXkgPSBkZWZhdWx0cy5yZXRyeURlbGF5O1xuICAgIHZhciByZXRyeU9uID0gZGVmYXVsdHMucmV0cnlPbjtcblxuICAgIGlmIChpbml0ICYmIGluaXQucmV0cmllcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoaXNQb3NpdGl2ZUludGVnZXIoaW5pdC5yZXRyaWVzKSkge1xuICAgICAgICByZXRyaWVzID0gaW5pdC5yZXRyaWVzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEFyZ3VtZW50RXJyb3IoJ3JldHJpZXMgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXInKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaW5pdCAmJiBpbml0LnJldHJ5RGVsYXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGlzUG9zaXRpdmVJbnRlZ2VyKGluaXQucmV0cnlEZWxheSkgfHwgKHR5cGVvZiBpbml0LnJldHJ5RGVsYXkgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgIHJldHJ5RGVsYXkgPSBpbml0LnJldHJ5RGVsYXk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnRFcnJvcigncmV0cnlEZWxheSBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlciBvciBhIGZ1bmN0aW9uIHJldHVybmluZyBhIHBvc2l0aXZlIGludGVnZXInKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaW5pdCAmJiBpbml0LnJldHJ5T24pIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGluaXQucmV0cnlPbikgfHwgKHR5cGVvZiBpbml0LnJldHJ5T24gPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICAgIHJldHJ5T24gPSBpbml0LnJldHJ5T247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnRFcnJvcigncmV0cnlPbiBwcm9wZXJ0eSBleHBlY3RzIGFuIGFycmF5IG9yIGZ1bmN0aW9uJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciB3cmFwcGVkRmV0Y2ggPSBmdW5jdGlvbiAoYXR0ZW1wdCkge1xuICAgICAgICAvLyBBcyBvZiBub2RlIDE4LCB0aGlzIGlzIG5vIGxvbmdlciBuZWVkZWQgc2luY2Ugbm9kZSBjb21lcyB3aXRoIG5hdGl2ZSBzdXBwb3J0IGZvciBmZXRjaDpcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgdmFyIF9pbnB1dCA9XG4gICAgICAgICAgdHlwZW9mIFJlcXVlc3QgIT09ICd1bmRlZmluZWQnICYmIGlucHV0IGluc3RhbmNlb2YgUmVxdWVzdFxuICAgICAgICAgICAgPyBpbnB1dC5jbG9uZSgpXG4gICAgICAgICAgICA6IGlucHV0O1xuICAgICAgICBmZXRjaChfaW5wdXQsIGluaXQpXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXRyeU9uKSAmJiByZXRyeU9uLmluZGV4T2YocmVzcG9uc2Uuc3RhdHVzKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiByZXRyeU9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXRyeU9uKGF0dGVtcHQsIG51bGwsIHJlc3BvbnNlKSlcbiAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXRyeU9uUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYocmV0cnlPblJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0cnkoYXR0ZW1wdCwgbnVsbCwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KS5jYXRjaChyZWplY3QpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChhdHRlbXB0IDwgcmV0cmllcykge1xuICAgICAgICAgICAgICAgIHJldHJ5KGF0dGVtcHQsIG51bGwsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXRyeU9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKHJldHJ5T24oYXR0ZW1wdCwgZXJyb3IsIG51bGwpKVxuICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJldHJ5T25SZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBpZihyZXRyeU9uUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXRyeShhdHRlbXB0LCBlcnJvciwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gY2F0Y2goZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGF0dGVtcHQgPCByZXRyaWVzKSB7XG4gICAgICAgICAgICAgIHJldHJ5KGF0dGVtcHQsIGVycm9yLCBudWxsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiByZXRyeShhdHRlbXB0LCBlcnJvciwgcmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIGRlbGF5ID0gKHR5cGVvZiByZXRyeURlbGF5ID09PSAnZnVuY3Rpb24nKSA/XG4gICAgICAgICAgcmV0cnlEZWxheShhdHRlbXB0LCBlcnJvciwgcmVzcG9uc2UpIDogcmV0cnlEZWxheTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd3JhcHBlZEZldGNoKCsrYXR0ZW1wdCk7XG4gICAgICAgIH0sIGRlbGF5KTtcbiAgICAgIH1cblxuICAgICAgd3JhcHBlZEZldGNoKDApO1xuICAgIH0pO1xuICB9O1xufTtcblxuZnVuY3Rpb24gaXNQb3NpdGl2ZUludGVnZXIodmFsdWUpIHtcbiAgcmV0dXJuIE51bWJlci5pc0ludGVnZXIodmFsdWUpICYmIHZhbHVlID49IDA7XG59XG5cbmZ1bmN0aW9uIEFyZ3VtZW50RXJyb3IobWVzc2FnZSkge1xuICB0aGlzLm5hbWUgPSAnQXJndW1lbnRFcnJvcic7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/fetch-retry/index.js\n");

/***/ })

};
;